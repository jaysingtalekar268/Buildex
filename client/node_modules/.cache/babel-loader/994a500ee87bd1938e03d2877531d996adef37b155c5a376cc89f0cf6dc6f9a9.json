{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\Desktop\\\\code\\\\web development\\\\buildex\\\\client\\\\src\\\\Components\\\\projectcards\\\\projectcards.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { Card, Button } from \"react-bootstrap\";\nimport './projectcards.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ProjectCards() {\n  _s();\n  let username = localStorage.getItem(\"user\");\n  const [userProjectList, setPList] = useState();\n  username = JSON.parse(username);\n  const getuserproject = async () => {\n    let userProjectResult = await fetch(\"http://localhost:3001/getuserproject\", {\n      method: 'post',\n      body: JSON.stringify({\n        name: username.name\n      }),\n      headers: {\n        'Content-type': 'application/json'\n      }\n    });\n    userProjectResult = await userProjectResult.json();\n    if (userProjectResult) {\n      // alert(listresult[0].name);\n\n      setPList(userProjectResult);\n    }\n    // userProjectResult = await userProjectResult.json();\n\n    // if (userProjectResult.project_id) {\n    //     console.warn(userProjectResult.project_id);\n    //     setPList(userProjectResult.project_id);\n    // }\n  };\n\n  useEffect(() => {\n    getuserproject();\n  }, []);\n  const ename = names => {\n    set;\n    if (userProjectList) {\n      console.warn(\"ulist\" + userProjectList[0].project_id.name);\n\n      // return names.map(name => <option value={name._id}>{name.name + \" \" + name._id}</option>);\n      return names.map(name => /*#__PURE__*/_jsxDEV(Card, {\n        className: \"cardContainer \",\n        children: /*#__PURE__*/_jsxDEV(Card.Body, {\n          children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n            children: [\" \", name.project_id.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n            children: name.project_id.desc\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"primary\",\n            children: \"Go somewhere\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 21\n      }, this));\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"wating to get user projects\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cardDiv \",\n    children: ename(userProjectList)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n}\n_s(ProjectCards, \"mMYOZQTzsXUnoEPliFDOUWXtExU=\");\n_c = ProjectCards;\nexport default ProjectCards;\nvar _c;\n$RefreshReg$(_c, \"ProjectCards\");","map":{"version":3,"names":["useEffect","useState","Card","Button","jsxDEV","_jsxDEV","ProjectCards","_s","username","localStorage","getItem","userProjectList","setPList","JSON","parse","getuserproject","userProjectResult","fetch","method","body","stringify","name","headers","json","ename","names","set","console","warn","project_id","map","className","children","Body","Title","fileName","_jsxFileName","lineNumber","columnNumber","Text","desc","variant","_c","$RefreshReg$"],"sources":["C:/Users/Dell/Desktop/code/web development/buildex/client/src/Components/projectcards/projectcards.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { Card, Button } from \"react-bootstrap\";\r\nimport './projectcards.css';\r\nfunction ProjectCards() {\r\n\r\n    let username = localStorage.getItem(\"user\");\r\n    const [userProjectList, setPList] = useState();\r\n    username = JSON.parse(username);\r\n    const getuserproject = async () => {\r\n        let userProjectResult = await fetch(\"http://localhost:3001/getuserproject\", {\r\n            method: 'post',\r\n            body: JSON.stringify({\r\n                name: username.name\r\n            }),\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            }\r\n        });\r\n\r\n        userProjectResult = await userProjectResult.json();\r\n\r\n        if (userProjectResult) {\r\n            // alert(listresult[0].name);\r\n\r\n            setPList(userProjectResult);\r\n        }\r\n        // userProjectResult = await userProjectResult.json();\r\n\r\n        // if (userProjectResult.project_id) {\r\n        //     console.warn(userProjectResult.project_id);\r\n        //     setPList(userProjectResult.project_id);\r\n        // }\r\n\r\n    };\r\n\r\n    useEffect(() => {\r\n        getuserproject();\r\n    }, []);\r\n\r\n    const ename = (names) => {\r\n        set\r\n        if (userProjectList)\r\n         {\r\n\r\n            console.warn(\"ulist\" + userProjectList[0].project_id.name);\r\n\r\n\r\n            // return names.map(name => <option value={name._id}>{name.name + \" \" + name._id}</option>);\r\n            return (\r\n                names.map(name =>\r\n                    <Card className=\"cardContainer \">\r\n                        <Card.Body>\r\n\r\n\r\n                            <Card.Title> {name.project_id.name}</Card.Title>\r\n                            <Card.Text>\r\n                                {name.project_id.desc}\r\n                            </Card.Text>\r\n                            <Button variant=\"primary\">Go somewhere</Button>\r\n                        </Card.Body>\r\n\r\n                    </Card>\r\n                )\r\n            )\r\n           \r\n\r\n        }\r\n        else {\r\n            return (<span>wating to get user projects</span>);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"cardDiv \">\r\n\r\n            {/* <Card className=\"cardContainer \">\r\n                <Card.Body>\r\n\r\n\r\n                    <Card.Title>Card Title</Card.Title>\r\n                    <Card.Text>\r\n                        Some quick example text to build on the card title and make up the\r\n                        bulk of the card's content.\r\n                    </Card.Text>\r\n                    <Button variant=\"primary\">Go somewhere</Button>\r\n                </Card.Body>\r\n\r\n            </Card> */}\r\n            {ename(userProjectList)}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProjectCards;"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,IAAI,EAAEC,MAAM,QAAQ,iBAAiB;AAC9C,OAAO,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC5B,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EAEpB,IAAIC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;EAC3C,MAAM,CAACC,eAAe,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,EAAE;EAC9CO,QAAQ,GAAGK,IAAI,CAACC,KAAK,CAACN,QAAQ,CAAC;EAC/B,MAAMO,cAAc,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAIC,iBAAiB,GAAG,MAAMC,KAAK,CAAC,sCAAsC,EAAE;MACxEC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEN,IAAI,CAACO,SAAS,CAAC;QACjBC,IAAI,EAAEb,QAAQ,CAACa;MACnB,CAAC,CAAC;MACFC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB;IACJ,CAAC,CAAC;IAEFN,iBAAiB,GAAG,MAAMA,iBAAiB,CAACO,IAAI,EAAE;IAElD,IAAIP,iBAAiB,EAAE;MACnB;;MAEAJ,QAAQ,CAACI,iBAAiB,CAAC;IAC/B;IACA;;IAEA;IACA;IACA;IACA;EAEJ,CAAC;;EAEDhB,SAAS,CAAC,MAAM;IACZe,cAAc,EAAE;EACpB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMS,KAAK,GAAIC,KAAK,IAAK;IACrBC,GAAG;IACH,IAAIf,eAAe,EAClB;MAEGgB,OAAO,CAACC,IAAI,CAAC,OAAO,GAAGjB,eAAe,CAAC,CAAC,CAAC,CAACkB,UAAU,CAACR,IAAI,CAAC;;MAG1D;MACA,OACII,KAAK,CAACK,GAAG,CAACT,IAAI,iBACVhB,OAAA,CAACH,IAAI;QAAC6B,SAAS,EAAC,gBAAgB;QAAAC,QAAA,eAC5B3B,OAAA,CAACH,IAAI,CAAC+B,IAAI;UAAAD,QAAA,gBAGN3B,OAAA,CAACH,IAAI,CAACgC,KAAK;YAAAF,QAAA,GAAC,GAAC,EAACX,IAAI,CAACQ,UAAU,CAACR,IAAI;UAAA;YAAAc,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAc,eAChDjC,OAAA,CAACH,IAAI,CAACqC,IAAI;YAAAP,QAAA,EACLX,IAAI,CAACQ,UAAU,CAACW;UAAI;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QACb,eACZjC,OAAA,CAACF,MAAM;YAACsC,OAAO,EAAC,SAAS;YAAAT,QAAA,EAAC;UAAY;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAS;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MACvC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAET,CACV;IAIT,CAAC,MACI;MACD,oBAAQjC,OAAA;QAAA2B,QAAA,EAAM;MAA2B;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAO;IACpD;EACJ,CAAC;EAED,oBACIjC,OAAA;IAAK0B,SAAS,EAAC,UAAU;IAAAC,QAAA,EAepBR,KAAK,CAACb,eAAe;EAAC;IAAAwB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACrB;AAEd;AAAC/B,EAAA,CAxFQD,YAAY;AAAAoC,EAAA,GAAZpC,YAAY;AA0FrB,eAAeA,YAAY;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}