{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\Desktop\\\\code\\\\web development\\\\buildex\\\\client\\\\src\\\\Components\\\\pcalendar\\\\pcalendar.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState, useRef } from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport Calendar from 'react-calendar';\nimport Popup from 'reactjs-popup';\nimport 'reactjs-popup/dist/index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PCalendar() {\n  _s();\n  const username = JSON.parse(localStorage.getItem(\"user\"));\n  const isLoading = useRef(true); // Loading state\n  const getdates = async () => {\n    let DateResult = await fetch(\"http://localhost:3001/getuserprojectstatus\", {\n      method: 'post',\n      body: JSON.stringify({\n        name: username.name\n      }),\n      headers: {\n        'Content-type': 'application/json'\n      }\n    });\n    DateResult = await DateResult.json();\n    if (DateResult) {\n      console.warn(\"date \" + DateResult[0].project_id[0].deadline);\n      isLoading.current = false;\n    }\n  };\n  useEffect(() => {\n    if (isLoading.current) {\n      getdates();\n      isLoading.current = false;\n    }\n  }, []);\n  const addevent = () => {\n    alert(\"on event added\");\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Calendar, {\n      onClickDay: addevent,\n      tileContent: _ref => {\n        let {\n          date,\n          view\n        } = _ref;\n        return view === 'month' && date.getDay() === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"It's Sunday!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 92\n        }, this) : null;\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 13\n  }, this);\n}\n_s(PCalendar, \"Z09uZuMmEpRVVISio2ub9/IcHSo=\");\n_c = PCalendar;\nexport default PCalendar;\nvar _c;\n$RefreshReg$(_c, \"PCalendar\");","map":{"version":3,"names":["useEffect","useState","useRef","Container","Calendar","Popup","jsxDEV","_jsxDEV","PCalendar","_s","username","JSON","parse","localStorage","getItem","isLoading","getdates","DateResult","fetch","method","body","stringify","name","headers","json","console","warn","project_id","deadline","current","addevent","alert","children","onClickDay","tileContent","_ref","date","view","getDay","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Dell/Desktop/code/web development/buildex/client/src/Components/pcalendar/pcalendar.js"],"sourcesContent":["import { useEffect, useState, useRef } from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport Calendar from 'react-calendar';\r\nimport Popup from 'reactjs-popup';\r\nimport 'reactjs-popup/dist/index.css';\r\n\r\nfunction PCalendar() {\r\n    const username = JSON.parse(localStorage.getItem(\"user\"));\r\n\r\n    const isLoading = useRef(true); // Loading state\r\n    const getdates = async () => {\r\n        let DateResult = await fetch(\"http://localhost:3001/getuserprojectstatus\", {\r\n            method: 'post',\r\n            body: JSON.stringify({\r\n                name: username.name\r\n            }),\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            }\r\n        });\r\n\r\n        DateResult = await DateResult.json();\r\n\r\n\r\n        if (DateResult) {\r\n            console.warn(\"date \" + DateResult[0].project_id[0].deadline);\r\n            isLoading.current = false;\r\n\r\n        }\r\n\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (isLoading.current) {\r\n            getdates();\r\n\r\n            isLoading.current = false;\r\n\r\n        }\r\n\r\n    }, []);\r\n\r\n    const addevent = ()=>{\r\n        alert(\"on event added\");\r\n    };\r\n\r\n    return (\r\n            <Container>\r\n                <Calendar onClickDay={addevent} \r\n                tileContent={({ date, view }) => view === 'month' && date.getDay() === 0 ? <p>It's Sunday!</p> : null}></Calendar>\r\n            </Container>\r\n    );\r\n}\r\n\r\nexport default PCalendar;"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AACnD,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,OAAOC,QAAQ,MAAM,gBAAgB;AACrC,OAAOC,KAAK,MAAM,eAAe;AACjC,OAAO,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;EAEzD,MAAMC,SAAS,GAAGb,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;EAChC,MAAMc,QAAQ,GAAG,MAAAA,CAAA,KAAY;IACzB,IAAIC,UAAU,GAAG,MAAMC,KAAK,CAAC,4CAA4C,EAAE;MACvEC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAET,IAAI,CAACU,SAAS,CAAC;QACjBC,IAAI,EAAEZ,QAAQ,CAACY;MACnB,CAAC,CAAC;MACFC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB;IACJ,CAAC,CAAC;IAEFN,UAAU,GAAG,MAAMA,UAAU,CAACO,IAAI,EAAE;IAGpC,IAAIP,UAAU,EAAE;MACZQ,OAAO,CAACC,IAAI,CAAC,OAAO,GAAGT,UAAU,CAAC,CAAC,CAAC,CAACU,UAAU,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC;MAC5Db,SAAS,CAACc,OAAO,GAAG,KAAK;IAE7B;EAEJ,CAAC;EAED7B,SAAS,CAAC,MAAM;IACZ,IAAIe,SAAS,CAACc,OAAO,EAAE;MACnBb,QAAQ,EAAE;MAEVD,SAAS,CAACc,OAAO,GAAG,KAAK;IAE7B;EAEJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,QAAQ,GAAGA,CAAA,KAAI;IACjBC,KAAK,CAAC,gBAAgB,CAAC;EAC3B,CAAC;EAED,oBACQxB,OAAA,CAACJ,SAAS;IAAA6B,QAAA,eACNzB,OAAA,CAACH,QAAQ;MAAC6B,UAAU,EAAEH,QAAS;MAC/BI,WAAW,EAAEC,IAAA;QAAA,IAAC;UAAEC,IAAI;UAAEC;QAAK,CAAC,GAAAF,IAAA;QAAA,OAAKE,IAAI,KAAK,OAAO,IAAID,IAAI,CAACE,MAAM,EAAE,KAAK,CAAC,gBAAG/B,OAAA;UAAAyB,QAAA,EAAG;QAAY;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAI,GAAG,IAAI;MAAA;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAY;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAC1G;AAExB;AAACjC,EAAA,CA9CQD,SAAS;AAAAmC,EAAA,GAATnC,SAAS;AAgDlB,eAAeA,SAAS;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}