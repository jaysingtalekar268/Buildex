{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\Desktop\\\\code\\\\web development\\\\buildex\\\\client\\\\src\\\\Components\\\\pcalendar\\\\pcalendar.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport Calendar from 'react-calendar';\nimport Popup from 'reactjs-popup';\nimport 'reactjs-popup/dist/index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PCalendar() {\n  _s();\n  const username = JSON.parse(localStorage.getItem(\"user\"));\n  const [userPdata, setUPData] = useState(\"\");\n  const getdeadlines = async () => {\n    let deadlinesResult = await fetch(\"http://localhost:3001/getuserprojectstatus\", {\n      method: \"post\",\n      body: JSON.stringify({\n        name: username.name\n      }),\n      headers: {\n        'Content-type': 'application/json'\n      }\n    });\n    deadlinesResult = await deadlinesResult.json();\n    console.warn(\"before da \" + deadlinesResult);\n    if (deadlinesResult) {\n      setUPData(deadlinesResult);\n    }\n  };\n  const addevent = (v, e) => {\n    alert(v);\n    console.warn(v);\n  };\n  const d = new Date();\n  // d.setFullYear(2023,2,26);\n\n  const getevent = _ref => {\n    let {\n      date,\n      view\n    } = _ref;\n    if (userPdata[0]) {\n      console.warn(\" its if \");\n      userPdata.map(x => x.project_id.map(y => {\n        console.warn(\"y  \" + y.pstatus);\n        if (view == 'month' && date.getDate() === y.deadline.getDate() && date.getMonth() === y.deadline.getMonth() && date.getFullYear() === y.deadline.getFullYear()) {\n          if (y.pstatus == \"comp\") {\n            return /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [y.name, \" Completed \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 33\n            }, this);\n          } else if (y.pstatus == \"incomp\") {\n            alert(\"icomp title\");\n            return /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [y.name, \" Incompleted \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 29\n            }, this);\n          } else if (y.pstatus == \"ovdue\") {\n            return /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [y.name, \" Overdue \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 29\n            }, this);\n          }\n        } else {\n          return null;\n        }\n      }));\n    } else {}\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Calendar, {\n      onClickDay: _ref2 => {\n        let {\n          date,\n          view\n        } = _ref2;\n        if (userPdata[0]) {\n          console.warn(\" its if \");\n          userPdata.map(x => x.project_id.map(y => {\n            console.warn(\"y  \" + y.pstatus);\n            if (view == 'month' && date.getDate() === y.deadline.getDate() && date.getMonth() === y.deadline.getMonth() && date.getFullYear() === y.deadline.getFullYear()) {\n              if (y.pstatus == \"comp\") {\n                return /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [y.name, \" Completed \"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 91,\n                  columnNumber: 25\n                }, this);\n              } else if (y.pstatus == \"incomp\") {\n                alert(\"icomp title\");\n                return /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [y.name, \" Incompleted \"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 95,\n                  columnNumber: 21\n                }, this);\n              } else if (y.pstatus == \"ovdue\") {\n                return /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [y.name, \" Overdue \"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 100,\n                  columnNumber: 21\n                }, this);\n              }\n            } else {\n              return null;\n            }\n          }));\n        } else {}\n      }\n\n      // tileContent={({ date, view }) => view === 'month' && date.getDate() === 26 && date.getMonth()===2  ? <p>It's Sunday! { 5+d}</p> : null}\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), \"tileContent=\", getevent, /*#__PURE__*/_jsxDEV(Popup, {\n      trigger: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button\",\n        children: \" Add Event \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 29\n      }, this),\n      modal: true,\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \" Modal content \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n}\n_s(PCalendar, \"ZayU+IZ3vli2G9HUyNwdc6MIlK0=\");\n_c = PCalendar;\n;\nexport default PCalendar;\nvar _c;\n$RefreshReg$(_c, \"PCalendar\");","map":{"version":3,"names":["useEffect","useState","Container","Calendar","Popup","jsxDEV","_jsxDEV","PCalendar","_s","username","JSON","parse","localStorage","getItem","userPdata","setUPData","getdeadlines","deadlinesResult","fetch","method","body","stringify","name","headers","json","console","warn","addevent","v","e","alert","d","Date","getevent","_ref","date","view","map","x","project_id","y","pstatus","getDate","deadline","getMonth","getFullYear","children","fileName","_jsxFileName","lineNumber","columnNumber","onClickDay","_ref2","trigger","className","modal","_c","$RefreshReg$"],"sources":["C:/Users/Dell/Desktop/code/web development/buildex/client/src/Components/pcalendar/pcalendar.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport Calendar from 'react-calendar';\r\nimport Popup from 'reactjs-popup';\r\nimport 'reactjs-popup/dist/index.css';\r\n\r\nfunction PCalendar() {\r\n    const username = JSON.parse(localStorage.getItem(\"user\"));\r\n\r\n    const [userPdata, setUPData] = useState(\"\");\r\n\r\n\r\n    const getdeadlines = async () => {\r\n\r\n        let deadlinesResult = await fetch(\"http://localhost:3001/getuserprojectstatus\", {\r\n            method: \"post\",\r\n            body: JSON.stringify({\r\n                name: username.name,\r\n            }),\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            }\r\n        });\r\n\r\n        deadlinesResult = await deadlinesResult.json();\r\n        console.warn(\"before da \" + deadlinesResult);\r\n        if (deadlinesResult) {\r\n            setUPData(deadlinesResult);\r\n        }\r\n    };\r\n\r\n    const addevent = (v, e) => {\r\n        alert(v);\r\n        console.warn(v);\r\n\r\n    };\r\n    const d = new Date();\r\n    // d.setFullYear(2023,2,26);\r\n\r\n    const getevent = ({ date, view }) => {\r\n\r\n        if (userPdata[0]) {\r\n            console.warn(\" its if \");\r\n            userPdata.map(x => x.project_id.map(y => {\r\n\r\n                console.warn(\"y  \" + y.pstatus)\r\n                if ( view == 'month' && date.getDate() === y.deadline.getDate() && date.getMonth() === y.deadline.getMonth() && date.getFullYear() === y.deadline.getFullYear() )\r\n                 {\r\n                    if(y.pstatus == \"comp\")\r\n                    {\r\n                        return (<p>{y.name} Completed </p> );\r\n                    }\r\n                else if (y.pstatus == \"incomp\") {\r\n                    alert(\"icomp title\");\r\n                    return (<p>{y.name} Incompleted </p> );\r\n                }\r\n\r\n                else if (y.pstatus == \"ovdue\") {\r\n\r\n                    return (<p>{y.name} Overdue </p> );\r\n                }\r\n            }\r\n                else\r\n                {\r\n                   return null;\r\n                }\r\n\r\n\r\n\r\n\r\n            }));\r\n\r\n        }\r\n        else {\r\n        }\r\n\r\n    };\r\n    return (\r\n        <Container>\r\n            <Calendar onClickDay={({ date, view }) => {\r\n\r\nif (userPdata[0]) {\r\n    console.warn(\" its if \");\r\n    userPdata.map(x => x.project_id.map(y => {\r\n\r\n        console.warn(\"y  \" + y.pstatus)\r\n        if ( view == 'month' && date.getDate() === y.deadline.getDate() && date.getMonth() === y.deadline.getMonth() && date.getFullYear() === y.deadline.getFullYear() )\r\n         {\r\n            if(y.pstatus == \"comp\")\r\n            {\r\n                return (<p>{y.name} Completed </p> );\r\n            }\r\n        else if (y.pstatus == \"incomp\") {\r\n            alert(\"icomp title\");\r\n            return (<p>{y.name} Incompleted </p> );\r\n        }\r\n\r\n        else if (y.pstatus == \"ovdue\") {\r\n\r\n            return (<p>{y.name} Overdue </p> );\r\n        }\r\n    }\r\n        else\r\n        {\r\n           return null;\r\n        }\r\n\r\n\r\n\r\n\r\n    }));\r\n\r\n}\r\nelse {\r\n}\r\n\r\n}}\r\n\r\n            // tileContent={({ date, view }) => view === 'month' && date.getDate() === 26 && date.getMonth()===2  ? <p>It's Sunday! { 5+d}</p> : null}\r\n            ></Calendar>\r\n            tileContent={getevent}\r\n            {/* tileContent={({ date, view }) => view === 'month' && date.getDate() === projectDeadline.getDate() && date.getMonth() === projectDeadline.getMonth() && date.getFullYear  () === projectDeadline.getFullYear()   ? <p>Selected </p> : null} */}\r\n\r\n            <Popup trigger={<button className=\"button\"> Add Event </button>} modal>\r\n                <span> Modal content </span>\r\n            </Popup>\r\n        </Container>\r\n    );\r\n\r\n};\r\n\r\nexport default PCalendar;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}