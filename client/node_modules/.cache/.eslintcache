[{"/home/sdidd/Desktop/FSDProject/Buildex/client/src/index.js":"1","/home/sdidd/Desktop/FSDProject/Buildex/client/src/App.js":"2","/home/sdidd/Desktop/FSDProject/Buildex/client/src/reportWebVitals.js":"3","/home/sdidd/Desktop/FSDProject/Buildex/client/src/Components/navbar/navbar.js":"4","/home/sdidd/Desktop/FSDProject/Buildex/client/src/Components/login/login.js":"5","/home/sdidd/Desktop/FSDProject/Buildex/client/src/Components/home/home.js":"6","/home/sdidd/Desktop/FSDProject/Buildex/client/src/Components/privatecomponents/privatecomponets.js":"7","/home/sdidd/Desktop/FSDProject/Buildex/client/src/Components/myproject/myproject.js":"8","/home/sdidd/Desktop/FSDProject/Buildex/client/src/Components/projectcards/projectcards.js":"9","/home/sdidd/Desktop/FSDProject/Buildex/client/src/Components/message/message.js":"10","/home/sdidd/Desktop/FSDProject/Buildex/client/src/Components/projectnavbar/projectnavbar.js":"11","/home/sdidd/Desktop/FSDProject/Buildex/client/src/Components/dashboard/dashboard.js":"12","/home/sdidd/Desktop/FSDProject/Buildex/client/src/Components/projectManager/projectManager.js":"13","/home/sdidd/Desktop/FSDProject/Buildex/client/src/Components/pcalendar/pcalendar.js":"14"},{"size":581,"mtime":1680023996015,"results":"15","hashOfConfig":"16"},{"size":1020,"mtime":1680023996011,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":1680023996015,"results":"18","hashOfConfig":"16"},{"size":969,"mtime":1680028225477,"results":"19","hashOfConfig":"16"},{"size":5495,"mtime":1680029883123,"results":"20","hashOfConfig":"16"},{"size":625,"mtime":1680023996011,"results":"21","hashOfConfig":"16"},{"size":268,"mtime":1680023996011,"results":"22","hashOfConfig":"16"},{"size":201,"mtime":1680023996011,"results":"23","hashOfConfig":"16"},{"size":2900,"mtime":1680023996015,"results":"24","hashOfConfig":"16"},{"size":7691,"mtime":1680023996011,"results":"25","hashOfConfig":"16"},{"size":1517,"mtime":1680023996015,"results":"26","hashOfConfig":"16"},{"size":7052,"mtime":1680023996011,"results":"27","hashOfConfig":"16"},{"size":5694,"mtime":1680023996011,"results":"28","hashOfConfig":"16"},{"size":6491,"mtime":1680023996011,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"j6c83k",{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},"/home/sdidd/Desktop/FSDProject/Buildex/client/src/index.js",[],[],"/home/sdidd/Desktop/FSDProject/Buildex/client/src/App.js",[],[],"/home/sdidd/Desktop/FSDProject/Buildex/client/src/reportWebVitals.js",[],[],"/home/sdidd/Desktop/FSDProject/Buildex/client/src/Components/navbar/navbar.js",["81","82","83","84"],[],"import React, { useEffect } from \"react\";\nimport { Link, useNavigate } from 'react-router-dom';\nimport 'bootstrap'\nimport { Button } from \"bootstrap\";\n\nconst Navbar = () => {\n\n    const navigate = useNavigate();\n\n    const auth = localStorage.getItem(\"user\");\n\n\n    return (\n        <div class=\"navbar navbar-light bg-light\">\n            <div class=\"\">\n                <Link class='nav-item'><img src='/home/sdidd/Desktop/FSDProject/Buildex/client/public/logo512.jpg'></img></Link>\n                <Link className=\"btn\" to=\"/\">Home</Link>\n                <Link className=\"btn\" to=\"/MyProject\">MyProject</Link>\n                <Link className=\"btn\" to=\"/Message\">Message</Link>\n                <Link className=\"btn\" to=\"/Profile\">Profile</Link>\n                {auth ? <Link className=\"btn\" to='/Login' onClick={() => localStorage.clear()}>Logout</Link> : <Link className=\"btn\" to='/Login' >Login</Link>}\n            </div>\n        </div>\n    )\n}\n\nexport default Navbar;","/home/sdidd/Desktop/FSDProject/Buildex/client/src/Components/login/login.js",["85","86","87","88","89","90","91","92","93","94"],[],"import { useNavigate } from 'react-router-dom'\nimport React, { useState, useEffect } from 'react';\nimport { Container, Button, Tabs, div } from 'react-bootstrap';\nimport './login.css'\n\nfunction Login() {\n\n    const [name, setName] = useState(\"\");\n    const [pwd, setPwd] = useState(\"\");\n    const [phone, setPhone] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [role, setRole] = useState(\"\");\n\n\n    const [nameWarn, setNwarn] = useState(\"\");\n    const [passWarn, setPwarn] = useState(\"\");\n\n    const [tabKey, setTab] = useState('login');\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        const auth = localStorage.getItem(\"user\");\n        if (auth) {\n            navigate(\"/\");\n        }\n    });\n    const login = async () => {\n        let loginStatus = await fetch(\"http://localhost:3001/Login\", {\n            method: \"post\",\n            body: JSON.stringify({\n                \"name\": name,\n                \"password\": pwd\n            }),\n            headers: {\n                'Content-type': 'application/json'\n            }\n\n        })\n\n        loginStatus = await loginStatus.json();\n        console.warn(loginStatus);\n\n        if (loginStatus.name) {\n            localStorage.setItem(\"user\", JSON.stringify(loginStatus));\n            navigate(\"/\");\n        }\n\n    };\n\n\n    const register = async () => {\n        let registerStatus = await fetch(\"http://localhost:3001/useradd\", {\n            method: \"post\",\n            body: JSON.stringify({\n                \"name\": name,\n                \"password\": pwd,\n                \"phone\": phone,\n                \"email\": email,\n                \"role\": role\n            }),\n            headers: {\n                'Content-type': 'application/json'\n            }\n\n        })\n\n        registerStatus = await registerStatus.json();\n        console.warn(registerStatus);\n\n        if (registerStatus.name) {\n            {\n                setTab(\"login\");\n                // navigate(\"/\");\n            }\n        }\n    };\n\n\n\n    const CheckInput = () => {\n        // alert('You clicked me!');\n\n        let nPass = false;\n        let pPass = false;\n        if (name.length == 0)\n            setNwarn(\"Please enter Username\");\n        else {\n            setNwarn(\"\");\n            nPass = true;\n        }\n        if (pwd.length == 0)\n            setPwarn(\"Please enter Password\");\n        else {\n            setPwarn(\"\");\n            pPass = true;\n        }\n\n        if (nPass && pPass) {\n            if (tabKey == \"login\") {\n                login();\n            }\n            else if (tabKey == \"register\") {\n                register();\n            }\n\n        }\n\n    };\n\n\n    return (\n\n        <div class='text-center position-absolute top-50 start-50 translate-middle shadow p-3 mb-5 bg-body rounded bg-info'>\n            <Tabs id=\"controlled-tab-example\" activeKey={tabKey} onSelect={(k) => setTab(k)} class=''>\n                <div eventKey=\"login\" class='card shadow text-center vw-50 vh-50'>\n                    <label>Your Username</label>\n                    <input class='form-text' onChange={(e) => setName(e.target.value)} type=\"text\" placeholder='Enter Username'></input>\n                    <div class='text-warning'>{nameWarn}</div>\n                    <label>Your Password</label>\n                    <input class='form-text' onChange={(e) => setPwd(e.target.value)} type=\"password\" placeholder='Enter Password'></input>\n                    <div class='text-warning align-items-md-end'>{passWarn}</div>\n                    <div><a class='link' onClick={() => setTab(\"register\")}>New to Buildex?</a></div>\n                    <div class='btn btn-light btn-lg align-middle align-self-center ' onClick={CheckInput}>Login</div>\n                </div>\n                <div eventKey=\"register\" class='card text-center shadow vw-50 vh-50'>\n                    <label>Your Username</label>\n                    <input className='form-text' onChange={(e) => setName(e.target.value)} type=\"text\" placeholder='Enter Username'></input>\n                    <div class='text-warning align-items-md-end'>{nameWarn}</div>\n                    <label>Your Password</label>\n                    <input className='form-text' onChange={(e) => setPwd(e.target.value)} type=\"text\" placeholder='Enter Password'></input>\n                    <div class='text-warning align-items-md-end'>{passWarn}</div>\n                    <label>Your Email</label>\n                    <input className='form-text' onChange={(e) => setEmail(e.target.value)} type=\"text\" placeholder='Enter Email'></input>\n                    <div class='text-warning align-items-md-end'>{passWarn}</div>\n                    <label>Your Phone</label>\n                    <input className='form-text' onChange={(e) => setPhone(e.target.value)} type=\"text\" placeholder='Enter Phone'></input>\n                    <div class='text-warning align-items-md-end'>{passWarn}</div>\n                    <label>Your Role</label>\n                    <input className='form-text' onChange={(e) => setRole(e.target.value)} type=\"text\" placeholder='Enter Role'></input>\n                    <div class='text-warning align-items-md-end'>{passWarn}</div>\n                    <div><a class='link' onClick={() => setTab(\"login\")}>Already have account</a></div>\n                    <button div class='btn btn-light btn-lg align-middle align-self-center ' onClick={CheckInput}>Register</button>\n                </div>\n            </Tabs>\n\n        </div>\n\n    );\n\n};\nexport default Login;","/home/sdidd/Desktop/FSDProject/Buildex/client/src/Components/home/home.js",["95","96"],[],"import { useEffect } from \"react\";\nimport { Button,Container,Row,Col } from \"react-bootstrap\";\nimport Message from \"../message/message\";\nimport './home.css'\n\nimport ProjectCards from \"../projectcards/projectcards\";\nfunction Home() {\n    \n    return (<div>\n            <Container fluid className=\"homeContainer\">\n               <Row>\n                <Col className=\"homeCol\" sm=\"1\">  </Col>\n                <Col className=\"homeCol \" ><ProjectCards></ProjectCards></Col>\n                <Col className=\"homeCol\" md=\"3\"><Message></Message></Col>\n               </Row>\n            </Container>\n    </div>);\n}\nexport default Home;","/home/sdidd/Desktop/FSDProject/Buildex/client/src/Components/privatecomponents/privatecomponets.js",[],[],"/home/sdidd/Desktop/FSDProject/Buildex/client/src/Components/myproject/myproject.js",[],[],"/home/sdidd/Desktop/FSDProject/Buildex/client/src/Components/projectcards/projectcards.js",["97"],[],"import { useEffect, useState } from \"react\";\nimport { Card, Button } from \"react-bootstrap\";\nimport './projectcards.css';\nfunction ProjectCards() {\n\n    let username = localStorage.getItem(\"user\");\n    const [userProjectList, setPList] = useState();\n    username = JSON.parse(username);\n    const getuserproject = async () => {\n        let userProjectResult = await fetch(\"http://localhost:3001/getuserproject\", {\n            method: 'post',\n            body: JSON.stringify({\n                name: username.name\n            }),\n            headers: {\n                'Content-type': 'application/json'\n            }\n        });\n\n        userProjectResult = await userProjectResult.json();\n        if (userProjectResult) {\n            console.warn(\"i resp\" + userProjectResult[0].project_id[0].name)\n            if (userProjectResult[0].project_id) {\n                setPList(userProjectResult);\n            }\n\n        }\n\n        console.warn(\"after user\" + userProjectResult[0].project_id)\n\n        // userProjectResult = await userProjectResult.json();\n\n        // if (userProjectResult.project_id) {\n        //     console.warn(userProjectResult.project_id);\n        //     setPList(userProjectResult.project_id);\n        // }\n\n    };\n\n    useEffect(() => {\n        getuserproject();\n    }, []);\n\n    const ename = (names) => {\n       \n         if (userProjectList) {\n\n            console.warn(\"ulist\" + userProjectList[0].project_id.name);\n\n\n            // return names.map(name => <option value={name._id}>{name.name + \" \" + name._id}</option>);\n            return (\n                names.map(name =>\n                    (\n                        name.project_id.map( xname=>\n                    <Card className=\"cardContainer \">\n                        <Card.Body>\n\n\n                            <Card.Title> {xname.name}</Card.Title>\n                            <Card.Text>\n                                {xname.desc}\n                            </Card.Text>\n                            <Button variant=\"primary\">Go somewhere</Button>\n                        </Card.Body>\n\n                    </Card>\n                        )\n                    )\n                )\n            )\n\n\n        }\n        else {\n            return (<span>wating to get user projects</span>);\n        }\n    }\n\n    return (\n        <div className=\"cardDiv \">\n\n            {/* <Card className=\"cardContainer \">\n                <Card.Body>\n\n\n                    <Card.Title>Card Title</Card.Title>\n                    <Card.Text>\n                        Some quick example text to build on the card title and make up the\n                        bulk of the card's content.\n                    </Card.Text>\n                    <Button variant=\"primary\">Go somewhere</Button>\n                </Card.Body>\n\n            </Card> */}\n            {ename(userProjectList)}\n        </div>\n    );\n}\n\nexport default ProjectCards;","/home/sdidd/Desktop/FSDProject/Buildex/client/src/Components/message/message.js",["98","99","100","101","102","103"],[],"import { useEffect, useRef, useState } from \"react\";\nimport { Container, Row, Col, Tab, Tabs, ListGroup, ListGroupItem, Button } from \"react-bootstrap\";\nimport './message.css';\nfunction Message() {\n    const username = JSON.parse(localStorage.getItem(\"user\"));\n    const [userMessage, setUMesg] = useState(\"\");\n    const isLoading = useRef(true); // Loading state\n    // console.warn(\"uname \"+username.name);\n    const [tabkey, seTKey] = useState(\"mclose\");\n    const [MPIndex, setMPIndex] = useState(0);\n    const [NMsgdata, setNMsg] = useState(\"\");\n\n    const getUmessage = async () => {\n\n        let userMData = await fetch(\"http://localhost:3001/getusermessage\", {\n            method: \"post\",\n            body: JSON.stringify({\n                name: username.name\n            }),\n            headers: {\n                'Content-type': 'application/json'\n            }\n\n        })\n\n        userMData = await userMData.json();\n        if (userMData) {\n            setUMesg(userMData);\n            console.warn(\"umsg \" + userMData[0].project_id[0].message[0].message_body)\n            // console.warn(\"usmsfn \");\n            isLoading.current = false;\n        }\n    };\n    const addnewmsg = async () => {\n        let addmsgstatus = await fetch(\"http://localhost:3001/messageadd\", {\n            method: \"post\",\n            body: JSON.stringify({\n                project_id: userMessage[0].project_id[MPIndex]._id,\n                message:{\n                    message_body:NMsgdata,\n                    message_sender:username.name,\n                    time:new Date()\n                }\n            }),\n            headers: {\n                'Content-type': 'application/json'\n            }\n        })\n\n        addmsgstatus = await addmsgstatus.json();\n        if(addmsgstatus)\n        {\n            console.warn(addmsgstatus);\n            getUmessage();\n        }\n\n    };\n\n\n    const sendNMsg = () => {\n        if(NMsgdata.length>=1)\n        {\n        alert('new message sending ' + NMsgdata);\n        console.warn(\"button nmsg \" + NMsgdata);\n       \n        addnewmsg();\n        }\n        else\n        {\n            alert(\"plesea add message\");\n        }\n        // setNMsg(e.target.value);\n    };\n\n\n\n    useEffect(() => {\n        if (isLoading.current) {\n            getUmessage();\n\n            isLoading.current = false;\n\n        }\n        else {\n\n            // test();\n\n        }\n\n\n    }, []);\n\n\n    useEffect(() => {\n        Showmessage();\n    }, [userMessage]);\n\n\n    // useEffect(() => {\n    //     // alert(\"messge set\")\n\n    // }, [NMsgdata]);\n\n\n    // const Showmessage = () => {\n    //     // alert(\"sshow message \");\n    //     if (userMessage) {\n    //         alert(\"its working \" + userMessage[0].project_id[0].message[0].message_body);\n\n\n    //         return <div>\n    //             {userMessage.map(user =>\n    //                 user.project_id.map(project =>\n    //                     project.message.map(m =>\n    //                         m.message_sender == username.name ?\n\n\n    //                             <span className=\"messageSend \">\n    //                                 <span className=\"messageSendBody\">{m.message_body}</span>\n    //                                 <span className=\"messageSendTime \">1:00</span>\n    //                             </span>\n\n\n\n    //                             :\n    //                             <span className=\"messageReceived \">\n    //                                 <span className=\"messageReceivedBody\">{m.message_body}</span>\n    //                                 <span className=\"messageReceivedTime \">12:00</span>\n    //                             </span>\n\n\n    //                     )\n    //                 )\n    //             )}\n    //         </div>\n    //     }\n    //     else {\n    //         return <div> Getting Message</div>\n    //     }\n\n\n    // };\n\n\n    const openMContainer = (index) => {\n        // alert(\"calling mopener\")\n        seTKey(\"mopen\");\n        setMPIndex(index);\n        console.warn(\"index \" + index)\n    };\n    const Showmessage = () => {\n        // alert(\"sshow message \");\n        if (userMessage) {\n            // alert(\"its working \" + userMessage[0].project_id[0].message[0].message_body);\n\n\n            return (\n\n                <Tabs id=\"controlled-tab-example\"\n                    activeKey={tabkey}\n                    onSelect={(k) => seTKey(k)}\n                    className=\"mb-3\" >\n\n\n                    <Tab eventKey=\"mclose\" >\n                        <ListGroup>\n                            {userMessage.map(user => user.project_id.map((project, pindex) => <ListGroup.Item action onClick={() => openMContainer(pindex)}>{project.name}</ListGroup.Item>))}\n                        </ListGroup>\n\n\n                    </Tab>\n                    <Tab eventKey=\"mopen\" >\n\n                        {userMessage.map(user =>\n\n                            <Container className=\"messageBody\">\n\n\n                                {user.project_id[MPIndex].message.map(m =>\n                                    <>{\n                                        m.message_sender == username.name ?\n\n\n                                            <span className=\"messageSend \">\n                                                <span className=\"messageSendBody\">{m.message_body}</span>\n                                                <span className=\"messageSendTime \">{ new Date(m.time).getHours()+\":\"+new Date(m.time).getMinutes()}</span>\n                                            </span>\n\n\n\n                                            :\n                                            <span className=\"messageReceived \">\n                                                <span className=\"messageReceivedBody\">{m.message_body}</span>\n                                                <span className=\"messageReceivedTime \">{ new Date(m.time).getHours()+\":\"+new Date(m.time).getMinutes()}</span>\n                                            </span>\n\n                                    }\n                                    </>\n                                )}\n\n\n\n\n\n\n                            </Container>\n\n\n                        )}\n\n                    </Tab>\n                </Tabs>\n\n            );\n        }\n        else {\n            return (<div> Getting Message</div>);\n        }\n\n\n    };\n\n\n\n    if (isLoading.current) {\n        return (\n            <div>Loading hold on\n\n            </div>\n        );\n    }\n    else {\n        return (\n            <Container className=\"messageContainer\">\n                {/* <button onClick={getUmessage}> get api</button> */}\n                {/* <ListGroup> */}\n                <Showmessage />\n\n\n                {/* </ListGroup> */}\n\n                {/* <Container className=\"messageBody\">\n                <span className=\"messageReceived \">\n                        <span className=\"messageReceivedBody\">jaysing hfkjfdf kfdf f dskfh dfhfj fkjfhdkjfd</span>\n                        <span className=\"messageReceivedTime \">12:00</span>\n                    </span>\n\n                    <span className=\"messageSend \">\n                        <span className=\"messageSendBody\">jaysing hfkjfdf kfdf f dskfh dfhfj fkjfhdkjfd</span>\n                        <span className=\"messageSendTime \">1:00</span>\n                    </span>\n\n                </Container> */}\n                <Container className=\"messageBar \">\n                    <input className=\"messageInput\" onChange={(e) => setNMsg(e.target.value)} type=\"text\" placeholder=\"Message\"></input>\n                    {/* <p>{NMsgdata}</p> */}\n                    <Button onClick={sendNMsg}></Button>\n                </Container>\n\n            </Container>\n        );\n    }\n}\n\nexport default Message;","/home/sdidd/Desktop/FSDProject/Buildex/client/src/Components/projectnavbar/projectnavbar.js",["104","105","106","107"],[],"import { Navbar, Tabs, Tab } from 'react-bootstrap';\nimport './projectnavbar.css';\nimport ProjectManager from '../projectManager/projectManager';\nimport Dashboard from '../dashboard/dashboard';\nimport PCalendar from '../pcalendar/pcalendar';\nimport { useEffect } from 'react';\nfunction ProjectNavBar() {\n   const auth = JSON.parse(localStorage.getItem(\"user\"));\n    return (\n        <div className='projectNavBarMainDiv'>\n               \n            <Tabs className='projectNavBarMainTab' defaultActiveKey=\"Calendar\">\n              { auth.role=='manager' ?<Tab className='projectNavBarItem' title=\"Project_manager\" eventKey=\"Project_manager\"><ProjectManager>    </ProjectManager> </Tab> : <Tab className='projectNavBarItem' title=\"project_employee\" eventKey=\"project_employee\">not</Tab>}\n                <Tab className='projectNavBarItem' title=\"Overview\" eventKey=\"Overview\"></Tab>\n                <Tab className='projectNavBarItem' title=\"List\" eventKey=\"List\"></Tab>\n                <Tab className='projectNavBarItem' title=\"Timeline\" eventKey=\"Timeline\"></Tab>\n                <Tab className='projectNavBarItem' title=\"Calendar\" eventKey=\"Calendar\"> <PCalendar></PCalendar></Tab>\n                <Tab className='projectNavBarItem' title=\"Dashboard\" eventKey=\"Dashboard\">\n                    {/* <Dashboard></Dashboard> */}\n                    </Tab>\n                <Tab className='projectNavBarItem' title=\"More\" eventKey=\"More\"></Tab>\n            </Tabs>\n        </div>\n    ); \n}\n\n\nexport default ProjectNavBar;","/home/sdidd/Desktop/FSDProject/Buildex/client/src/Components/dashboard/dashboard.js",["108","109","110","111","112","113","114","115","116","117","118","119","120","121"],[],"import './dashboard.css'\nimport { Card, Button } from 'react-bootstrap';\nimport { useEffect, useState } from 'react';\nimport Chart from \"react-apexcharts\";\n\n\nfunction Dashboard() {\n\n    const username = JSON.parse(localStorage.getItem(\"user\"));\n    const [userProjectData, setUPdata] = useState(\"\");\n    const [compTask, setCTask] = useState(0);\n    const [incoTask, setITask] = useState(0);\n    const [overTask, setOTask] = useState(0);\n    const [totalTask, setTTask] = useState(0);\n    const [catg, setCatg] = useState([]);\n    const [catgCount, setCCount] = useState([]);\n\n    const [barChartData, setBChart] = useState(\n        {\n            options: {\n                chart: {\n                    id: 'apexchart-example'\n                },\n                xaxis: {\n                    categories: catg\n                    // categories: [1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999]\n                }\n            },\n            series: [{\n                name: 'series-1',\n                //   data: [30, 40, 35, 50, 49, 60, 70, 91, 125]\n                data: catgCount\n            }]\n        }\n\n    );\n    const [pieData, setPData] = useState([]);\n\n    const [pieCharData, setPChart] = useState(\n        {\n            options: { labels: [\"Completed\", 'Incompleted'] },\n            series: pieData\n\n        }\n\n    );\n\n    const getProject = async () => {\n        let userProjectResult = await fetch(\"http://localhost:3001/getuserprojectstatus\", {\n            method: \"post\",\n            body: JSON.stringify({\n                name: username.name,\n\n            }),\n            headers: {\n                'Content-type': 'application/json'\n            }\n        });\n\n        // userProjectResult = await userProjectResult.json();\n        userProjectResult = await userProjectResult.json();\n        console.warn(\"before da \" + userProjectResult);\n        if (userProjectResult) {\n            setUPdata(userProjectResult);\n\n        }\n\n        console.warn(\"after da \" + userProjectData);\n    };\n\n    useEffect(() => {\n        getProject()\n    }, []);\n\n    useEffect(() => {\n        setCTask(0);\n        setITask(0);\n        setOTask(0);\n        setTTask(0);\n        getProjectStatus();\n    }, [userProjectData]);\n\n\n\n    const getProjectStatus = () => {\n\n        // alert(\"its projectstaus\");  \n        let c = 0;\n        let i = 0;\n        let o = 0;\n        let t = 0;\n        if (userProjectData[0]) {\n            console.warn(\" its if \");\n            userProjectData.map(x => x.project_id.map(y => {\n\n                console.warn(\"y  \" + y.pstatus)\n                if (y.pstatus == \"comp\") {\n                    c++;\n                }\n                else if (y.pstatus == \"incomp\") {\n                    i++;\n                    console.log(\"catg \" + catg.find(ele => ele == y.catg));\n                    if (catg.find(ele => ele == y.catg)) {\n                        catg.map((item, index) => {\n                            if (item == y.catg) {\n                                console.log(\"be catg \" + catg[index] + \" count \" + catgCount[index]);\n                                let temp = catgCount;\n                                temp[index]++;\n                                setCCount(temp);\n\n                                console.log(\"afcatg \" + catg[index] + \" count \" + catgCount[index]);\n                            }\n                        });\n\n                    }\n                    else {\n                        let temp = catg;\n                        temp.push(y.catg);\n                        setCatg(temp);\n                        temp = catgCount;\n                        temp.push(1);\n                        setCCount(temp);\n                    }\n\n\n                }\n                else if (y.pstatus == \"ovdue\") {\n                    o++;\n                }\n\n                // console.log(\"catg \" + catg.find(ele => ele == y.catg));\n                // if (catg.find(ele => ele == y.catg)) {\n                //     catg.map((item, index) => {\n                //         if (item == y.catg) {\n                //             console.log(\"be catg \" + catg[index] + \" count \" + catgCount[index]);\n                //             let temp = catgCount;\n                //             temp[index]++;\n                //             setCCount(temp);\n\n                //             console.log(\"afcatg \" + catg[index] + \" count \" + catgCount[index]);\n                //         }\n                //     });\n\n                // }\n                // else {\n                //     let temp = catg;\n                //     temp.push(y.catg);\n                //     setCatg(temp);\n                //     temp = catgCount;\n                //     temp.push(1);\n                //     setCCount(temp);\n                // }\n\n            }));\n\n        }\n        else {\n        }\n        setCTask(c);\n        setITask(i);\n        setOTask(o);\n        setTTask(c + i + o);\n        setPData([c, i])\n\n\n    };\n    return (\n        <div className='dashboardContainer'>\n            <Card className='dashboardCard'>\n                <Card.Body>\n                    <Card.Title className='dashboardCardTitle'>Completed Tasks</Card.Title>\n                    <span className='CompletedTaskCount' >{compTask}</span>\n                    {/* <button onClick={getProjectStatus}>get project</button> */}\n\n                </Card.Body>\n            </Card>\n            <Card className='dashboardCard'>\n                <Card.Body>\n                    <Card.Title className='dashboardCardTitle'>Incompleted Tasks</Card.Title>\n                    <span className='CompletedTaskCount' >{incoTask}</span>\n\n                </Card.Body>\n            </Card>\n            <Card className='dashboardCard'>\n                <Card.Body>\n                    <Card.Title className='dashboardCardTitle'>Overdure Tasks</Card.Title>\n                    <span className='CompletedTaskCount' >{overTask}</span>\n\n                </Card.Body>\n            </Card>\n            <Card className='dashboardCard'>\n                <Card.Body>\n                    <Card.Title className='dashboardCardTitle'>Total Tasks</Card.Title>\n                    <span className='CompletedTaskCount' >{totalTask}</span>\n\n                </Card.Body>\n            </Card>\n\n            {catg[0] ? <Chart options={barChartData.options} series={barChartData.series} type=\"bar\" width={500} height={320} /> : <span>waiting for data</span>}\n\n            <Chart options={pieCharData.options} series={pieData} type=\"donut\" width=\"380\" />\n            {/* <Card className='dashboardCardGraph'>\n                <Card.Body>\n                    <Card.Title className='dashboardCardTitle'>All task by completion status</Card.Title>\n                    <span className='CompletedTaskCount' >100</span>\n                    <Chart options={pieCharData.options} series={pieData} type=\"donut\" width=\"380\" />\n\n                </Card.Body>\n            </Card> */}\n            {/* \n            {\"catg\" + catg + \"\"}\n            {\" catg count\" + catgCount + \"\"} */}\n\n        </div>\n    );\n}\n\nexport default Dashboard;","/home/sdidd/Desktop/FSDProject/Buildex/client/src/Components/projectManager/projectManager.js",["122","123","124","125","126","127","128","129","130","131"],[],"import { Container, Tabs, Tab, Row, Col, Dropdown, DropdownButton } from \"react-bootstrap\";\nimport { useEffect, useState } from \"react\";\nimport { Multiselect } from 'multiselect-react-dropdown';\n\nimport './projectManager.css';\nimport { Calendar } from \"react-calendar\";\nfunction ProjectManager() {\n    const [projectName, setPName] = useState(\"\");\n    const [projectDesc, setPDesc] = useState(\"\");\n    const [projectType, setPType] = useState(\"\");\n    const [projectDeadline, setPDDate] = useState(new Date());\n\n    const [tabKey, setTab] = useState('NProject');\n    const [devList, setDev] = useState(\"\");\n    const [selDevList, setSelDev] = useState();\n    const temp = [{ name: \"raj\", id: 12 },\n    { name: \"jay\", id: 45 }];\n    const [multiDevSel, setMDev] = useState([]);\n\n    useEffect(() => {\n        getlist();\n    }, []);\n\n\n\n\n    const addProject = async () => {\n        alert(projectName + projectDesc);\n        let addresult = await fetch(\"http://localhost:3001/Projectadd\", {\n            method: 'post',\n            body: JSON.stringify({\n                name: projectName,\n                desc: projectDesc,\n                devl_id: multiDevSel,\n                catg: projectType,\n                deadline: projectDeadline,\n                message: [{\n                    message_body: \"hello\",\n                    message_sender: \"manager\",\n                    time:new Date()\n                }],\n                created: new Date(),\n                pstatus: \"incomp\"\n            }),\n            headers: {\n                'Content-type': 'application/json'\n            }\n        });\n\n        addresult = addresult.json();\n\n    };\n\n    const getlist = async () => {\n\n        let listresult = await fetch(\"http://localhost:3001/getdevl\", {\n            method: 'post',\n            body: JSON.stringify(),\n            headers: {\n                'Content-type': 'application/json'\n            }\n        });\n        listresult = await listresult.json();\n\n        if (listresult) {\n\n            setDev(listresult);\n\n\n\n        }\n    };\n\n    const ename = (names) => {\n\n        if (devList) {\n            console.warn(\"devlist\" + devList);\n            return names.map(name => <option value={name._id}>{name.name + \" \" + name._id}</option>);\n        }\n\n    }\n\n    const MultipleSelect = (e) => {\n        // alert(\"multi select\");\n        setMDev(Array.isArray(e) ? e.map(x => x._id) : []);\n        console.warn(\"multi \" + multiDevSel);\n\n    };\n\n    // const MultipleRemove = (e) => {\n    //   alert(\"multi remove\");\n    //     setMDev([]);\n    //     console.warn(\"multi \" + multiDevSel);\n\n    // };\n\n    const Addsel = (e) => {\n        alert(\"im calling\");\n        setSelDev(e.target.value);\n    };\n\n    console.warn(\"pdeadline \" + projectDeadline.getDate());\n\n    return (\n        <Container className=\"mainContainer\">\n            <Row>\n                <Col className=\"accountMenu\" lg={1}>\n                    <ul>\n                        <li className=\"menuItem\"><a className=\"menuLink\" onClick={() => setTab(\"NProject\")}> New Project </a></li>\n                        <li className=\"menuItem\"><a className=\"menuLink\" onClick={() => setTab(\"MProject\")}> Modify Project</a></li>\n                        <li className=\"menuItem\"><a className=\"menuLink\" onClick={() => setTab(\"DProject\")}> Delete Project</a></li>\n                    </ul>\n                </Col>\n                <Col className=\"accountMenuInfo\">\n                    <Container>\n                        <Tabs activeKey={tabKey}>\n                            <Tab eventKey=\"NProject\" >\n                                <label className=\"inputLabel\">Project Name</label>\n                                <input className=\"input\" onChange={e => setPName(e.target.value)}></input>\n                                <label className=\"inputLabel\">Project Description</label>\n                                <input className=\"input\" onChange={(e) => setPDesc(e.target.value)}></input>\n                                <label className=\"inputLabel\">Project category</label>\n                                <input className=\"input\" onChange={(e) => setPType(e.target.value)}></input>\n\n\n                                {/* <select name=\"devSel\" id=\"devSel\" onChange={Addsel} multiple>\n                                    {ename(devList)}\n                                </select>\n                                {selDevList} */}\n\n                                <label className=\"inputLabel\">Select Deadline</label>\n                                <Calendar minDate={new Date()} onClickDay={(v, e) => setPDDate(v)} tileContent={({ date, view }) => view === 'month' && date.getDate() === projectDeadline.getDate() && date.getMonth() === projectDeadline.getMonth() && date.getFullYear() === projectDeadline.getFullYear() ? <p>Selected </p> : null} ></Calendar>\n                                <label className=\"inputLabel\">Select Developers</label>\n\n                                {devList ? <Multiselect options={devList} displayValue=\"name\" onSelect={MultipleSelect} ></Multiselect> : <span>loading user</span>}\n                                {multiDevSel + \"\"}\n                                <button className=\"inputBtn\" onClick={addProject} >Add Project</button>\n\n\n                            </Tab>\n                            <Tab eventKey=\"MProject\" >\n                                herer mo\n                            </Tab>\n                            <Tab eventKey=\"DProject\" >\n                                herer dew\n                            </Tab>\n                        </Tabs>\n                    </Container>\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\n\n\nexport default ProjectManager;","/home/sdidd/Desktop/FSDProject/Buildex/client/src/Components/pcalendar/pcalendar.js",["132","133"],[],"import { useEffect, useState, useRef } from \"react\";\nimport { Container, Tab, Tabs } from \"react-bootstrap\";\nimport Calendar from 'react-calendar';\nimport Popup from 'reactjs-popup';\nimport 'reactjs-popup/dist/index.css';\n\nfunction PCalendar() {\n    const username = JSON.parse(localStorage.getItem(\"user\"));\n    const [userDData, setUDData] = useState(\"\");\n    const [userEData, setUEData] = useState(\"\");\n    const [userEDate, setUEDate] = useState();\n    const [tabkey, seTKey] = useState(\"eclose\");\n    const isLoading = useRef(true); // Loading state\n    const getdates = async () => {\n        let DateResult = await fetch(\"http://localhost:3001/getuserdates\", {\n            method: 'post',\n            body: JSON.stringify({\n                name: username.name\n\n            }),\n            headers: {\n                'Content-type': 'application/json'\n            }\n        });\n\n        DateResult = await DateResult.json();\n\n\n        if (DateResult) {\n            console.warn(\"date \" + DateResult[0].project_id[0].deadline);\n            setUDData(DateResult);\n            isLoading.current = false;\n\n        }\n\n    };\n\n    useEffect(() => {\n        if (isLoading.current) {\n            getdates();\n\n            isLoading.current = false;\n\n        }\n\n    }, []);\n\n\n    const setevent = async () => {\n        let eventResult = await fetch(\"http://localhost:3001/eventadd\", {\n            method: 'post',\n            body: JSON.stringify({\n                name: username.name,\n                event: {\n                    event_body: userEData,\n\n                    event_date: userEDate\n                }\n            }),\n            headers: {\n                'Content-type': 'application/json'\n            }\n        });\n\n        if (eventResult) {\n            alert(\"event added \");\n        }\n\n\n\n    }\n\n    const addevent = (v, e) => {\n\n        if (userEData.length >= 1) {\n            setevent();\n        }\n        else {\n            alert(\"enter event details\")\n        }\n\n    };\n    const openevet = (v, e) => {\n        setUEDate(v);\n\n        seTKey(\"eopen\");\n        alert(v);\n\n    };\n\n    if (userDData) {\n        // alert(userDData[0].userevent[0].event_body)\n        return (\n\n            <Container>\n                <Tabs id=\"controlled-tab-example\"\n                    activeKey={tabkey}\n                    onSelect={(k) => seTKey(k)}\n                    className=\"mb-3\" >\n                    <Tab eventKey=\"eclose\" >\n                        <Calendar onClickDay={openevet}\n                            tileContent={\n                                (\n                                    ({ date, view }) =>\n                                        userDData.map(user =>\n                                        (\n                                            <>\n                                                <>\n                                                    {user.project_id.map(project =>\n                                                        <>\n                                                            <>\n                                                                {view === 'month' && date.getDate() === new Date(project.deadline).getDate()\n                                                                    && date.getFullYear() === new Date(project.deadline).getFullYear()\n                                                                    && date.getMonth() === new Date(project.deadline).getMonth()\n                                                                    ? <p>{project.name} status {project.pstatus}</p> : null\n                                                                }\n                                                            </>\n                                                            <>\n                                                                {view === 'month' && date.getDate() === new Date(project.created).getDate()\n                                                                    && date.getFullYear() === new Date(project.created).getFullYear()\n                                                                    && date.getMonth() === new Date(project.created).getMonth()\n                                                                    ? <p>{project.name} created</p> : null\n                                                                }\n                                                            </>\n\n                                                        </>\n\n                                                    )\n                                                    }\n                                                </>\n                                                <>\n\n                                                    {user.userevent.map(uevent =>\n                                                        <>\n                                                            {\n                                                                view === 'month' && date.getDate() === new Date(uevent.event_date).getDate()\n                                                                    && date.getFullYear() === new Date(uevent.event_date).getFullYear()\n                                                                    && date.getMonth() === new Date(uevent.event_date).getMonth()\n                                                                    ? <p>{uevent.event_body} </p> : null\n                                                            }\n                                                        </>\n                                                    )}\n                                                </>\n                                            </>\n                                        )\n\n                                        )\n                                )\n                            } >\n\n                        </Calendar>\n                    </Tab>\n                    <Tab eventKey=\"eopen\" >\n                        <label >Selected Date {userEDate ? userEDate.toDateString() : null}</label>\n                        <input className='eInput' onChange={(e) => setUEData(e.target.value)} type=\"text\" placeholder='Enter eventdata'></input>\n                        <button onClick={addevent}> Add event</button>\n                        <button onClick={()=>seTKey(\"eclose\")}> Back</button>\n                    </Tab>\n                </Tabs>\n            </Container>\n        );\n    }\n    else {\n        return <div>data is loading</div>\n    }\n}\n\nexport default PCalendar;",{"ruleId":"134","severity":1,"message":"135","line":1,"column":17,"nodeType":"136","messageId":"137","endLine":1,"endColumn":26},{"ruleId":"134","severity":1,"message":"138","line":4,"column":10,"nodeType":"136","messageId":"137","endLine":4,"endColumn":16},{"ruleId":"134","severity":1,"message":"139","line":8,"column":11,"nodeType":"136","messageId":"137","endLine":8,"endColumn":19},{"ruleId":"140","severity":1,"message":"141","line":16,"column":40,"nodeType":"142","endLine":16,"endColumn":116},{"ruleId":"134","severity":1,"message":"143","line":3,"column":10,"nodeType":"136","messageId":"137","endLine":3,"endColumn":19},{"ruleId":"134","severity":1,"message":"138","line":3,"column":21,"nodeType":"136","messageId":"137","endLine":3,"endColumn":27},{"ruleId":"134","severity":1,"message":"144","line":3,"column":35,"nodeType":"136","messageId":"137","endLine":3,"endColumn":38},{"ruleId":"145","severity":1,"message":"146","line":71,"column":13,"nodeType":"147","messageId":"148","endLine":74,"endColumn":14},{"ruleId":"149","severity":1,"message":"150","line":85,"column":25,"nodeType":"151","messageId":"152","endLine":85,"endColumn":27},{"ruleId":"149","severity":1,"message":"150","line":91,"column":24,"nodeType":"151","messageId":"152","endLine":91,"endColumn":26},{"ruleId":"149","severity":1,"message":"150","line":99,"column":24,"nodeType":"151","messageId":"152","endLine":99,"endColumn":26},{"ruleId":"149","severity":1,"message":"150","line":102,"column":29,"nodeType":"151","messageId":"152","endLine":102,"endColumn":31},{"ruleId":"153","severity":1,"message":"154","line":122,"column":26,"nodeType":"142","endLine":122,"endColumn":77},{"ruleId":"153","severity":1,"message":"154","line":141,"column":26,"nodeType":"142","endLine":141,"endColumn":74},{"ruleId":"134","severity":1,"message":"135","line":1,"column":10,"nodeType":"136","messageId":"137","endLine":1,"endColumn":19},{"ruleId":"134","severity":1,"message":"138","line":2,"column":10,"nodeType":"136","messageId":"137","endLine":2,"endColumn":16},{"ruleId":"155","severity":1,"message":"156","line":42,"column":8,"nodeType":"157","endLine":42,"endColumn":10,"suggestions":"158"},{"ruleId":"134","severity":1,"message":"159","line":2,"column":21,"nodeType":"136","messageId":"137","endLine":2,"endColumn":24},{"ruleId":"134","severity":1,"message":"160","line":2,"column":26,"nodeType":"136","messageId":"137","endLine":2,"endColumn":29},{"ruleId":"134","severity":1,"message":"161","line":2,"column":53,"nodeType":"136","messageId":"137","endLine":2,"endColumn":66},{"ruleId":"155","severity":1,"message":"162","line":91,"column":8,"nodeType":"157","endLine":91,"endColumn":10,"suggestions":"163"},{"ruleId":"155","severity":1,"message":"164","line":96,"column":8,"nodeType":"157","endLine":96,"endColumn":21,"suggestions":"165"},{"ruleId":"149","severity":1,"message":"150","line":181,"column":58,"nodeType":"151","messageId":"152","endLine":181,"endColumn":60},{"ruleId":"134","severity":1,"message":"166","line":1,"column":10,"nodeType":"136","messageId":"137","endLine":1,"endColumn":16},{"ruleId":"134","severity":1,"message":"167","line":4,"column":8,"nodeType":"136","messageId":"137","endLine":4,"endColumn":17},{"ruleId":"134","severity":1,"message":"135","line":6,"column":10,"nodeType":"136","messageId":"137","endLine":6,"endColumn":19},{"ruleId":"149","severity":1,"message":"150","line":13,"column":26,"nodeType":"151","messageId":"152","endLine":13,"endColumn":28},{"ruleId":"134","severity":1,"message":"138","line":2,"column":16,"nodeType":"136","messageId":"137","endLine":2,"endColumn":22},{"ruleId":"134","severity":1,"message":"168","line":18,"column":26,"nodeType":"136","messageId":"137","endLine":18,"endColumn":35},{"ruleId":"134","severity":1,"message":"169","line":39,"column":25,"nodeType":"136","messageId":"137","endLine":39,"endColumn":34},{"ruleId":"155","severity":1,"message":"170","line":73,"column":8,"nodeType":"157","endLine":73,"endColumn":10,"suggestions":"171"},{"ruleId":"155","severity":1,"message":"172","line":81,"column":8,"nodeType":"157","endLine":81,"endColumn":25,"suggestions":"173"},{"ruleId":"134","severity":1,"message":"174","line":91,"column":13,"nodeType":"136","messageId":"137","endLine":91,"endColumn":14},{"ruleId":"175","severity":1,"message":"176","line":94,"column":57,"nodeType":"177","messageId":"178","endLine":94,"endColumn":59},{"ruleId":"149","severity":1,"message":"150","line":97,"column":31,"nodeType":"151","messageId":"152","endLine":97,"endColumn":33},{"ruleId":"149","severity":1,"message":"150","line":100,"column":36,"nodeType":"151","messageId":"152","endLine":100,"endColumn":38},{"ruleId":"149","severity":1,"message":"150","line":102,"column":64,"nodeType":"151","messageId":"152","endLine":102,"endColumn":66},{"ruleId":"149","severity":1,"message":"150","line":103,"column":46,"nodeType":"151","messageId":"152","endLine":103,"endColumn":48},{"ruleId":"175","severity":1,"message":"176","line":104,"column":48,"nodeType":"177","messageId":"178","endLine":104,"endColumn":50},{"ruleId":"149","severity":1,"message":"150","line":105,"column":38,"nodeType":"151","messageId":"152","endLine":105,"endColumn":40},{"ruleId":"149","severity":1,"message":"150","line":127,"column":36,"nodeType":"151","messageId":"152","endLine":127,"endColumn":38},{"ruleId":"134","severity":1,"message":"179","line":1,"column":42,"nodeType":"136","messageId":"137","endLine":1,"endColumn":50},{"ruleId":"134","severity":1,"message":"180","line":1,"column":52,"nodeType":"136","messageId":"137","endLine":1,"endColumn":66},{"ruleId":"134","severity":1,"message":"181","line":15,"column":12,"nodeType":"136","messageId":"137","endLine":15,"endColumn":22},{"ruleId":"134","severity":1,"message":"182","line":16,"column":11,"nodeType":"136","messageId":"137","endLine":16,"endColumn":15},{"ruleId":"134","severity":1,"message":"183","line":50,"column":9,"nodeType":"136","messageId":"137","endLine":50,"endColumn":18},{"ruleId":"134","severity":1,"message":"184","line":74,"column":11,"nodeType":"136","messageId":"137","endLine":74,"endColumn":16},{"ruleId":"134","severity":1,"message":"185","line":97,"column":11,"nodeType":"136","messageId":"137","endLine":97,"endColumn":17},{"ruleId":"153","severity":1,"message":"154","line":109,"column":50,"nodeType":"142","endLine":109,"endColumn":109},{"ruleId":"153","severity":1,"message":"154","line":110,"column":50,"nodeType":"142","endLine":110,"endColumn":109},{"ruleId":"153","severity":1,"message":"154","line":111,"column":50,"nodeType":"142","endLine":111,"endColumn":109},{"ruleId":"134","severity":1,"message":"186","line":4,"column":8,"nodeType":"136","messageId":"137","endLine":4,"endColumn":13},{"ruleId":"155","severity":1,"message":"187","line":46,"column":8,"nodeType":"157","endLine":46,"endColumn":10,"suggestions":"188"},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'navigate' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Container' is defined but never used.","'div' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getuserproject'. Either include it or remove the dependency array.","ArrayExpression",["189"],"'Row' is defined but never used.","'Col' is defined but never used.","'ListGroupItem' is defined but never used.","React Hook useEffect has a missing dependency: 'getUmessage'. Either include it or remove the dependency array.",["190"],"React Hook useEffect has a missing dependency: 'Showmessage'. Either include it or remove the dependency array.",["191"],"'Navbar' is defined but never used.","'Dashboard' is defined but never used.","'setBChart' is assigned a value but never used.","'setPChart' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getProject'. Either include it or remove the dependency array.",["192"],"React Hook useEffect has a missing dependency: 'getProjectStatus'. Either include it or remove the dependency array.",["193"],"'t' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Dropdown' is defined but never used.","'DropdownButton' is defined but never used.","'selDevList' is assigned a value but never used.","'temp' is assigned a value but never used.","'addresult' is assigned a value but never used.","'ename' is assigned a value but never used.","'Addsel' is assigned a value but never used.","'Popup' is defined but never used.","React Hook useEffect has a missing dependency: 'getdates'. Either include it or remove the dependency array.",["194"],{"desc":"195","fix":"196"},{"desc":"197","fix":"198"},{"desc":"199","fix":"200"},{"desc":"201","fix":"202"},{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},"Update the dependencies array to be: [getuserproject]",{"range":"207","text":"208"},"Update the dependencies array to be: [getUmessage]",{"range":"209","text":"210"},"Update the dependencies array to be: [Showmessage, userMessage]",{"range":"211","text":"212"},"Update the dependencies array to be: [getProject]",{"range":"213","text":"214"},"Update the dependencies array to be: [getProjectStatus, userProjectData]",{"range":"215","text":"216"},"Update the dependencies array to be: [getdates]",{"range":"217","text":"218"},[1294,1296],"[getuserproject]",[2395,2397],"[getUmessage]",[2454,2467],"[Showmessage, userMessage]",[2057,2059],"[getProject]",[2204,2221],"[getProjectStatus, userProjectData]",[1265,1267],"[getdates]"]